# DESCRIPTION
# This problem asks about roots, multiplcity and the signs of a given polynomial.
# ENDDESCRIPTION

## DBsubject('Precalculus')
## DBchapter('Polynomials')
## DBsection('Roots')
## KEYWORDS('')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')
## Author('Peter Staab')
## Institution('Fitchburg State University')

DOCUMENT();
loadMacros(
"PGstandard.pl",
"MathObjects.pl",
"PGML.pl",
"PGcourse.pl",
);

# make sure we're in the context we want
Context("Vector");
$showPartialCorrectAnswers = 1; # show partial answers is true

## the following takes a factored polynomial with given roots,
## multiplicity and leading coefficient and produces a nicely
## printed version.

sub print_factored_poly {
  my ($roots,$mults,$coeff) = @_;
  die "The length of the roots array must equal the length of the multiplicity array"
        if(scalar(@{$roots}) != scalar(@{$mults}));
  my @terms;
  for my $i (0 .. (scalar(@{$roots})-1)) {
    my $term = $roots->[$i]==0?"x":"(".nicestring([1,-$roots->[$i]]).")";
    $term .= "^" .$mults->[$i] if ($mults->[$i]>1);
    push(@terms,$term);
  }
  return nicestring([$coeff]). join("",@terms);
}

$root1 = random(-6,4);
do {
  $root2 = random(-6,6);
} while ($root1>=$root2);


$roots = [$root1,$root2];
$m1 = random(1,3); $m2 = random(1,3);
$degree = $m1+$m2;
$mults = [$m1,$m2];

$coeff = non_zero_random(-10,10);

$print_poly = print_factored_poly($roots,$mults,$coeff);
$poly = Compute("$print_poly");

$leading_term = Compute("$coeff*x^($degree)");

$sorted_roots = Compute("<". join(",",@{$roots}) .">");
$sorted_mults = Compute("<". join(",",@{$mults}) .">");

Context("Interval");
$intpos = Interval("{}");
$intneg = Interval("{}");

for my $i (0 .. (scalar(@{$roots}))){
  if ($i == 0) {
    $int = Interval("(-Infinity,".$roots->[0].")");
    $f = $poly->eval(x=>$roots[0]-1);
  }
  elsif ($i==scalar(@{$roots})){
    $int = Interval("(".$roots->[$i-1] . ",Infinity)");
    $f = $poly->eval(x=>$roots->[$i-1]+1);
  } else {
    $int = Interval("(".$roots->[$i-1] . "," . $roots->[$i] . ")");
    $f = $poly->eval(x=>0.5*($roots->[$i-1] + $roots->[$i]));
  }

  if ($f<0) {
     $intneg = Union($intneg,$int);
  } else {
     $intpos = Union($intpos,$int);
  }
}


TEXT(beginproblem());
BEGIN_PGML

Consider the polynomial [`p(x)=[$print_poly]`]

Write the zeros of the polynomial from smallest to largest.  Enter the results
in < >.  For example, if the roots are [`x=4,-3,0`], enter <-3,0,4>.
[__________]{$sorted_roots}

Enter the multiplicity of the roots using the same notation with < >
[___________]{$sorted_mults}

Enter the degree of [`p(x)`]  [____________]{$degree}

Enter the leading term:[_________]{$leading_term}

Draw a sign chart on paper for [`p(x)`].  Using interval notation, write the set where

[`p(x)`] is positive:[____________________]{$intpos}

[`p(x)`] is negative:[____________________]{$intneg}


END_PGML

$sign = $coeff<0?"negative":"positive";
$even_odd = $degree % 2==0?"even":"odd";

$ltbehavior = ($coeff<0)?"The leading term flipped vertically.":"the leading term.";
$sign_left = ($degree %2==0)?(($coeff<0)?"negative":"positive"):(($coeff<0)?"positive":"negative");

BEGIN_PGML_SOLUTION

The polynomial is in factored form, so we examine where the factors are 0.  This occurs at
[$root1] and [$root2].  Thus we write the result as [$sorted_roots].

To determine the multiplicities of the roots, examine the powers of the factors.  The power
of the term [`[@ nicestring([1,-$root1])@]`] is [$m1] and the power of the term
[`[@ nicestring([1,-$root2])@]`] is [$m2].  We write the multiplicities in order as [$sorted_mults].

The degree of the polynomial is the sum of the mulitplicities or [$degree].

The leading term is is the leading coefficient [$coeff] times [`x`] to the power which is the
sum of the multiplicities.  The result is [`[$leading_term]`].

To construct the sign chart, use the leading term of [`[$leading_term]`] and since [$coeff] is [$sign] then at the
extremes, the polynomial looks like [$ltbehavior] Thus the part of of the sign chart
less that [$root1] is [$sign_left].  Recall that the sign of the polynomial will
flip signs over a root of even multiplicity and keep the same sign over a root of
odd multiplicity.  Using this information over the roots results in

Interval of [`p(x)`] positive is [`[$intpos->TeX]`].

Interval of [`p(x)`] negative is [`[$intneg->TeX]`].

END_PGML_SOLUTION

ENDDOCUMENT();
